name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint

    - name: Build application
      run: npm run build

    - name: Run unit tests
      run: npm test

    - name: Run E2E tests
      run: npm run test:e2e

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    services:
      moderation:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        ports:
          - 3000:3000
        options: >-
          --health-cmd "node -e \"require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })\""
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Wait for service to be ready
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:3000/health; then
            echo "Service is ready"
            break
          fi
          echo "Waiting for service... ($i/30)"
          sleep 2
        done

    - name: Test health endpoint
      run: |
        response=$(curl -s http://localhost:3000/health)
        echo "Health response: $response"
        if echo "$response" | grep -q '"status":"healthy"'; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed"
          exit 1
        fi

    - name: Test text moderation endpoint
      run: |
        response=$(curl -s -X POST -H "Content-Type: application/json" \
          -d '{"content":"This is a test message"}' \
          http://localhost:3000/moderate/text)
        echo "Text moderation response: $response"
        if echo "$response" | grep -q '"success":true'; then
          echo "‚úÖ Text moderation test passed"
        else
          echo "‚ùå Text moderation test failed"
          exit 1
        fi

    - name: Test video moderation endpoint
      run: |
        response=$(curl -s -X POST -H "Content-Type: application/json" \
          -d '{"videoUrl":"https://example.com/test.mp4"}' \
          http://localhost:3000/moderate/video)
        echo "Video moderation response: $response"
        if echo "$response" | grep -q '"success":true'; then
          echo "‚úÖ Video moderation test passed"
        else
          echo "‚ùå Video moderation test failed"
          exit 1
        fi

  helm-package:
    name: Package and Publish Helm Chart
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Package Helm chart
      run: |
        helm package helm/moderation-service

    - name: Upload Helm chart artifact
      uses: actions/upload-artifact@v4
      with:
        name: helm-chart
        path: moderation-service-*.tgz

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [smoke-test, helm-package]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for staging
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig-staging
        export KUBECONFIG=kubeconfig-staging
        kubectl config use-context staging-cluster
        kubectl cluster-info --context staging-cluster

    - name: Download Helm chart artifact
      uses: actions/download-artifact@v4
      with:
        name: helm-chart

    - name: Environment validation
      run: |
        echo "üîç Validating staging environment"
        if [ -z "${{ secrets.STAGING_OPENAI_API_KEY }}" ]; then
          echo "‚ö†Ô∏è  WARNING: STAGING_OPENAI_API_KEY not configured - will run in mock mode"
        fi
        if [ -z "${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "‚ö†Ô∏è  WARNING: AWS credentials not configured for staging - will run in mock mode"
        fi

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        
        export KUBECONFIG=kubeconfig-staging
        
        helm upgrade --install moderation-service-staging ./moderation-service-1.0.0.tgz \
          --namespace moderation-staging \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set env[0].name=NODE_ENV \
          --set env[0].value=staging \
          --set env[1].name=PORT \
          --set env[1].value=3000 \
          --set env[2].name=OPENAI_API_KEY \
          --set env[2].valueFrom.secretKeyRef.name=staging-openai-secret \
          --set env[2].valueFrom.secretKeyRef.key=api-key \
          --set env[3].name=AWS_ACCESS_KEY_ID \
          --set env[3].valueFrom.secretKeyRef.name=staging-aws-secret \
          --set env[3].valueFrom.secretKeyRef.key=access-key-id \
          --set env[4].name=AWS_SECRET_ACCESS_KEY \
          --set env[4].valueFrom.secretKeyRef.name=staging-aws-secret \
          --set env[4].valueFrom.secretKeyRef.key=secret-access-key \
          --set ingress.enabled=true \
          --set ingress.className=nginx \
          --set ingress.hosts[0].host=moderation-staging.example.com \
          --set ingress.hosts[0].paths[0].path=/ \
          --set ingress.hosts[0].paths[0].pathType=Prefix \
          --wait --timeout=10m

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig-staging
        echo "Verifying deployment..."
        kubectl get pods -n moderation-staging -l app.kubernetes.io/name=moderation-service
        kubectl rollout status deployment/moderation-service-staging -n moderation-staging
        
        # Wait for service to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/moderation-service-staging -n moderation-staging
        
        echo "‚úÖ Staging deployment completed successfully"

    - name: Cleanup kubeconfig
      if: always()
      run: |
        rm -f kubeconfig-staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [smoke-test, helm-package]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'

    - name: Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Configure kubectl for production
      run: |
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig-production
        export KUBECONFIG=kubeconfig-production
        kubectl config use-context production-cluster
        kubectl cluster-info --context production-cluster

    - name: Download Helm chart artifact
      uses: actions/download-artifact@v4
      with:
        name: helm-chart

    - name: Environment validation
      run: |
        echo "üîç Validating production environment"
        if [ -z "${{ secrets.PRODUCTION_OPENAI_API_KEY }}" ]; then
          echo "‚ùå ERROR: PRODUCTION_OPENAI_API_KEY not configured!"
          exit 1
        fi
        if [ -z "${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "‚ùå ERROR: AWS credentials not configured for production!"
          exit 1
        fi
        echo "‚úÖ All required API keys configured for production"

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying version ${{ steps.version.outputs.version }} to production"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
        
        export KUBECONFIG=kubeconfig-production
        
        helm upgrade --install moderation-service ./moderation-service-1.0.0.tgz \
          --namespace moderation-production \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ steps.version.outputs.version }} \
          --set env[0].name=NODE_ENV \
          --set env[0].value=production \
          --set env[1].name=PORT \
          --set env[1].value=3000 \
          --set env[2].name=OPENAI_API_KEY \
          --set env[2].valueFrom.secretKeyRef.name=production-openai-secret \
          --set env[2].valueFrom.secretKeyRef.key=api-key \
          --set env[3].name=AWS_ACCESS_KEY_ID \
          --set env[3].valueFrom.secretKeyRef.name=production-aws-secret \
          --set env[3].valueFrom.secretKeyRef.key=access-key-id \
          --set env[4].name=AWS_SECRET_ACCESS_KEY \
          --set env[4].valueFrom.secretKeyRef.name=production-aws-secret \
          --set env[4].valueFrom.secretKeyRef.key=secret-access-key \
          --set replicaCount=5 \
          --set resources.requests.cpu=500m \
          --set resources.requests.memory=512Mi \
          --set resources.limits.cpu=1000m \
          --set resources.limits.memory=1Gi \
          --set autoscaling.minReplicas=5 \
          --set autoscaling.maxReplicas=20 \
          --set ingress.enabled=true \
          --set ingress.className=nginx \
          --set ingress.hosts[0].host=moderation.example.com \
          --set ingress.hosts[0].paths[0].path=/ \
          --set ingress.hosts[0].paths[0].pathType=Prefix \
          --set ingress.tls[0].secretName=moderation-tls \
          --set ingress.tls[0].hosts[0]=moderation.example.com \
          --wait --timeout=15m

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig-production
        echo "Verifying production deployment..."
        kubectl get pods -n moderation-production -l app.kubernetes.io/name=moderation-service
        kubectl rollout status deployment/moderation-service -n moderation-production
        
        # Wait for service to be ready
        kubectl wait --for=condition=available --timeout=600s deployment/moderation-service -n moderation-production
        
        # Validate health endpoint
        kubectl port-forward -n moderation-production service/moderation-service 8080:80 &
        sleep 10
        curl -f http://localhost:8080/health || (echo "‚ùå Health check failed" && exit 1)
        
        echo "‚úÖ Production deployment completed successfully"

    - name: Cleanup kubeconfig
      if: always()
      run: |
        rm -f kubeconfig-production

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Determine deployment details
      id: deployment
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "version=main-${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "environment=unknown" >> $GITHUB_OUTPUT
          echo "version=unknown" >> $GITHUB_OUTPUT
          echo "status=failed" >> $GITHUB_OUTPUT
        fi

    - name: Notify Teams - Deployment Success
      if: steps.deployment.outputs.status == 'success'
      run: |
        TEAMS_WEBHOOK_URL="${{ secrets.TEAMS_WEBHOOK_URL }}"
        
        if [ -z "$TEAMS_WEBHOOK_URL" ]; then
          echo "‚ö†Ô∏è  WARNING: TEAMS_WEBHOOK_URL not configured - skipping Teams notification"
          exit 0
        fi
        
        ENVIRONMENT="${{ steps.deployment.outputs.environment }}"
        VERSION="${{ steps.deployment.outputs.version }}"
        COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
        WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        # Determine color and icon based on environment
        if [ "$ENVIRONMENT" == "production" ]; then
          COLOR="28a745"  # Green for production
          ICON="üöÄ"
        else
          COLOR="007bff"  # Blue for staging
          ICON="üîß"
        fi
        
        # Create Teams message payload
        cat > teams_payload.json << EOF
        {
          "@type": "MessageCard",
          "@context": "https://schema.org/extensions",
          "themeColor": "$COLOR",
          "summary": "Moderation Service Deployed to $ENVIRONMENT",
          "sections": [
            {
              "activityTitle": "$ICON **Moderation Service Deployment**",
              "activitySubtitle": "Successfully deployed to **$ENVIRONMENT**",
              "facts": [
                {
                  "name": "Environment:",
                  "value": "$ENVIRONMENT"
                },
                {
                  "name": "Version:",
                  "value": "$VERSION"
                },
                {
                  "name": "Repository:",
                  "value": "${{ github.repository }}"
                },
                {
                  "name": "Deployed by:",
                  "value": "${{ github.actor }}"
                },
                {
                  "name": "Commit:",
                  "value": "${{ github.sha }}"
                }
              ],
              "markdown": true
            }
          ],
          "potentialAction": [
            {
              "@type": "OpenUri",
              "name": "View Commit",
              "targets": [
                {
                  "os": "default",
                  "uri": "$COMMIT_URL"
                }
              ]
            },
            {
              "@type": "OpenUri",
              "name": "View Workflow",
              "targets": [
                {
                  "os": "default",
                  "uri": "$WORKFLOW_URL"
                }
              ]
            }
          ]
        }
        EOF
        
        # Send notification to Teams
        curl -H "Content-Type: application/json" \
             -d @teams_payload.json \
             "$TEAMS_WEBHOOK_URL"
        
        echo "‚úÖ Teams notification sent for $ENVIRONMENT deployment"

    - name: Notify Teams - Deployment Failure
      if: steps.deployment.outputs.status == 'failed'
      run: |
        TEAMS_WEBHOOK_URL="${{ secrets.TEAMS_WEBHOOK_URL }}"
        
        if [ -z "$TEAMS_WEBHOOK_URL" ]; then
          echo "‚ö†Ô∏è  WARNING: TEAMS_WEBHOOK_URL not configured - skipping Teams notification"
          exit 0
        fi
        
        WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
        
        # Create Teams message payload for failure
        cat > teams_payload.json << EOF
        {
          "@type": "MessageCard",
          "@context": "https://schema.org/extensions",
          "themeColor": "dc3545",
          "summary": "Moderation Service Deployment Failed",
          "sections": [
            {
              "activityTitle": "‚ùå **Moderation Service Deployment Failed**",
              "activitySubtitle": "Deployment encountered an error",
              "facts": [
                {
                  "name": "Repository:",
                  "value": "${{ github.repository }}"
                },
                {
                  "name": "Triggered by:",
                  "value": "${{ github.actor }}"
                },
                {
                  "name": "Commit:",
                  "value": "${{ github.sha }}"
                },
                {
                  "name": "Branch/Tag:",
                  "value": "${{ github.ref_name }}"
                }
              ],
              "markdown": true
            }
          ],
          "potentialAction": [
            {
              "@type": "OpenUri",
              "name": "View Failed Workflow",
              "targets": [
                {
                  "os": "default",
                  "uri": "$WORKFLOW_URL"
                }
              ]
            },
            {
              "@type": "OpenUri",
              "name": "View Commit",
              "targets": [
                {
                  "os": "default",
                  "uri": "$COMMIT_URL"
                }
              ]
            }
          ]
        }
        EOF
        
        # Send notification to Teams
        curl -H "Content-Type: application/json" \
             -d @teams_payload.json \
             "$TEAMS_WEBHOOK_URL"
        
        echo "‚úÖ Teams failure notification sent"

  notify-dependent-services:
    name: Notify Dependent Services
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, notify]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Dispatch to API Gateway
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.DISPATCH_TOKEN }}
        repository: ${{ github.repository_owner }}/api-gateway
        event-type: moderation-service-updated
        client-payload: |
          {
            "service": "moderation-service",
            "version": "${{ github.ref_name }}",
            "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}",
            "environment": "${{ contains(github.ref, 'refs/tags/') && 'production' || 'staging' }}",
            "timestamp": "${{ github.event.head_commit.timestamp }}"
          }

    - name: Dispatch to User Service
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.DISPATCH_TOKEN }}
        repository: ${{ github.repository_owner }}/user-service
        event-type: moderation-service-updated
        client-payload: |
          {
            "service": "moderation-service",
            "version": "${{ github.ref_name }}",
            "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}",
            "environment": "${{ contains(github.ref, 'refs/tags/') && 'production' || 'staging' }}",
            "timestamp": "${{ github.event.head_commit.timestamp }}"
          }

    - name: Dispatch to Content Service
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.DISPATCH_TOKEN }}
        repository: ${{ github.repository_owner }}/content-service
        event-type: moderation-service-updated
        client-payload: |
          {
            "service": "moderation-service",
            "version": "${{ github.ref_name }}",
            "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}",
            "environment": "${{ contains(github.ref, 'refs/tags/') && 'production' || 'staging' }}",
            "timestamp": "${{ github.event.head_commit.timestamp }}"
          }